// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/justEngineer/go-yandex-personal-gofermart/internal/database (interfaces: Storage)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/justEngineer/go-yandex-personal-gofermart/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStorage) AddOrder(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStorageMockRecorder) AddOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorage)(nil).AddOrder), arg0, arg1, arg2)
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(arg0 context.Context, arg1 models.UserAuthData, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), arg0, arg1, arg2)
}

// AddWithdrawal mocks base method.
func (m *MockStorage) AddWithdrawal(arg0 context.Context, arg1 string, arg2 models.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawal indicates an expected call of AddWithdrawal.
func (mr *MockStorageMockRecorder) AddWithdrawal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawal", reflect.TypeOf((*MockStorage)(nil).AddWithdrawal), arg0, arg1, arg2)
}

// ApplyAccural mocks base method.
func (m *MockStorage) ApplyAccural(arg0 *models.AccrualInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyAccural", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyAccural indicates an expected call of ApplyAccural.
func (mr *MockStorageMockRecorder) ApplyAccural(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyAccural", reflect.TypeOf((*MockStorage)(nil).ApplyAccural), arg0)
}

// CloseConnections mocks base method.
func (m *MockStorage) CloseConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnections")
}

// CloseConnections indicates an expected call of CloseConnections.
func (mr *MockStorageMockRecorder) CloseConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnections", reflect.TypeOf((*MockStorage)(nil).CloseConnections))
}

// GetOrderIDs mocks base method.
func (m *MockStorage) GetOrderIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderIDs indicates an expected call of GetOrderIDs.
func (mr *MockStorageMockRecorder) GetOrderIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderIDs", reflect.TypeOf((*MockStorage)(nil).GetOrderIDs))
}

// GetOrders mocks base method.
func (m *MockStorage) GetOrders(arg0 context.Context, arg1 string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStorageMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStorage)(nil).GetOrders), arg0, arg1)
}

// GetOrdersInProgress mocks base method.
func (m *MockStorage) GetOrdersInProgress(arg0 context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersInProgress", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersInProgress indicates an expected call of GetOrdersInProgress.
func (mr *MockStorageMockRecorder) GetOrdersInProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersInProgress", reflect.TypeOf((*MockStorage)(nil).GetOrdersInProgress), arg0)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(arg0 context.Context, arg1 string) (models.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(models.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), arg0, arg1)
}

// GetUserBalance mocks base method.
func (m *MockStorage) GetUserBalance(arg0 context.Context, arg1 string) (models.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(models.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStorageMockRecorder) GetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStorage)(nil).GetUserBalance), arg0, arg1)
}

// GetWithdrawals mocks base method.
func (m *MockStorage) GetWithdrawals(arg0 context.Context, arg1 string) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockStorageMockRecorder) GetWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockStorage)(nil).GetWithdrawals), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStorage) UpdateOrder(arg0 context.Context, arg1 models.AccrualInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorageMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorage)(nil).UpdateOrder), arg0, arg1)
}
